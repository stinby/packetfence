# Radius filter configuration
# 
# you are able to rewrite the radius answer based on attributes values, by default the radius filter
# answer will be merge with the original radius answer. (to overwrite it add merge_answer = no).
# Also by default the status of the answer will be RLM_MODULE_OK but this status can be overwritten by
# the status attribute.
# The status attribute can have the following values (See http://wiki.freeradius.org/modules/Rlm_perl for more details):
# RLM_MODULE_REJECT
# RLM_MODULE_FAIL
# RLM_MODULE_OK
# RLM_MODULE_HANDLED
# RLM_MODULE_INVALID
# RLM_MODULE_USERLOCK
# RLM_MODULE_NOTFOUND
# RLM_MODULE_NOOP
# RLM_MODULE_UPDATED
# RLM_MODULE_NUMCODES
#
# you can use 4 scopes in the radius filter:
# returnRadiusAccessAccept is when you return the answer for a device access
# returnAuthorizeRead is when you return the answer for the switch read login access
# returnAuthorizeWrite is when you return the answer for the switch write login access
# returnAuthorizeVoip  is when you return the answer for a VoIP
#
# Make a simple rule like this:
#
#[macauth]
#filter = connection_type
#operator = is
#value = Ethernet-NoEAP
#
#[mac]
#filter = mac
#operator = is
#value = 00:11:22:33:44:55
#
#This rule will return the VLAN ID id 42 for this specific MAC address
#
#[1:macauth&mac]
#scope = returnRadiusAccessAccept
#merge_answer = no
#answer1 = Tunnel-Medium-Type => 6
#answer2 = Tunnel-Type => 13
#answer3 = Tunnel-Private-Group-ID => 42
#
# This rule will return access-accept if there is no violation
#
#[violation]
#filter = violation
#operator = defined
#
#[2:macauth&!violation]
#scope = returnRadiusAccessAccept
#
# Advanced rule:
#
# This rule will return the vlan id associated to the user role and Cisco-AVPair where the attributes
# has been evaluated.
# merge_answer mean to not merge the original answer with radius filter answer.
#[3:macauth&!violation]
#scope = returnRadiusAccessAccept
#merge_answer = no
#answer1 = Tunnel-Medium-Type => 6
#answer2 = Tunnel-Type => 13
#answer3 = Tunnel-Private-Group-ID => $vlan
#answer4 = Cisco-AVPair => url-redirect-acl=$user_role;url-redirect=${switch._portalURL}/cep$session_id
#
# All the answer in the rule is computed by PacketFence so you can set static and dynamic values
# Let say you defined this answer and the $user_role value is set to default:
#
#answer1 = Tunnel-Medium-Type => 6
#answer2 = Tunnel-Type => 13
#answer3 = Tunnel-Private-Group-ID => ${switch._vlans.$user_role}
#answer4 = Cisco-AVPair => url-redirect-acl=$user_role;url-redirect=${switch._portalURL}/cep$session_id
#
# PacketFence will first evaluate simple variables like $user_role to default then it will evaluate
# ${switch._vlans.default} to 1 (see switch hash above).
#
#'node_info => {
#        'autoreg' => 'no',
#        ....
#},
#'switch' => {
#    '_vlans' => {
#        'inline' => '6',
#        'isolation' => '2',
#        'normal' => '1',
#        'default' => '1',
#        'registration' => '3',
#        'voice' => '5',
#        'macDetection' => '4',
#    },
#    '_portalURL' => 'http://192.168.1.2',
#    ....
#},
#'wasInline' => 0,
#...
#
# Then PacketFence will evaluate the answer4 to Cisco-AVPair => url-redirect-acl=default;url-redirect=http://192.168.1.2/cepab23bc
#
# You can also define a range of int values and it will return a random number in this range:
#
# answer5 = Session-Timeout => 200..300,500..700
#
# will return a radius attribute Session-Timeout with a value between 200 and 300 or between 500 and 700
#
#### Fingerbank example ####
#
# There are two ways to detect if the device is an Android phone, either by looking at the hierarchy of device ID or looking at the hierarchy of device names
# Although using device names is more intuitive, they are subject to (very rare) changes, so using the ID is recommended
# To find a device ID by the name, the following command can be used : '/usr/local/pf/bin/pfcmd fingerbank find_device_id "Generic Android"'
# See the Fingerbank section in the PacketFence Administration interface for a list of all devices or https://api.fingerbank.org/devices
#
# This would then give us the following condition (note the use of includes) : 
#[android_by_id]
#filter = fingerbank_info.device_hierarchy_ids
#operator = includes
#value = 202
#
# Same example using the name:
#[android_by_name]
#filter = fingerbank_info.device_hierarchy_names
#operator = includes
#value = Generic Android
#
# Next, lets add filtering on the Android operating system version using:
# (CAUTION: the version is not always available, when not present, this condition will return false)
#[version_4_plus]
#filter = fingerbank_info.version
#operator = greater_equals
#value = 4
#
# We could also want to validate that the device score is high enough through the following condition:
#[minimum_score]
#filter = fingerbank_info.score
#operator = greater_equals
#value = 30
#
# The above will ensure that the score is higher than 30 (included) which is the level at which Fingerbank uses informations that aren't easily spoofable for its decision.
#
# We could now create a filter that sets the Session-Timeout to 5 minutes for all Android phones versions 4 and above that have a score of at least 30
#
#[1:android_by_id&version_4_plus&minimum_score]
#scope = returnRadiusAccessAccept
#merge_answer = yes
#answer1 = Session-Timeout => 300
#
# filter can be for the scope returnRadiusAccessAccept:
#     node_info.autoreg
#     node_info.status
#     node_info.bypass_vlan
#     node_info.bandwidth_balance
#     node_info.regdate
#     node_info.bypass_role
#     node_info.device_class
#     node_info.device_type
#     node_info.device_version
#     node_info.device_score
#     node_info.pid
#     node_info.machine_account
#     node_info.category
#     node_info.mac
#     node_info.last_arp
#     node_info.lastskip
#     node_info.last_dhcp
#     node_info.user_agent
#     node_info.computername
#     node_info.dhcp_fingerprint
#     node_info.detect_date
#     node_info.voip
#     node_info.notes
#     node_info.time_balance
#     node_info.sessionid
#     node_info.dhcp_vendor
#     node_info.unregdate
#     fingerbank_info.device_fq
#     fingerbank_info.device_hierarchy_names
#     fingerbank_info.device_hierarchy_ids
#     fingerbank_info.score
#     fingerbank_info.version
#     fingerbank_info.mobile
#     switch._switchIp
#     switch._ip
#     switch._portalURL
#     switch._switchMac
#     switch._ip
#     ifIndex
#     mac
#     connection_type
#     username
#     ssid
#     vlan
#     wasInline
#     user_role
#     radius_request
#     violation
#     time
#
# filter can be for the scopes returnAuthorizeRead and returnAuthorizeWrite
#     switch._switchIp
#     switch._ip
#     switch._portalURL
#     switch._switchMac
#     switch._ip
#     realm
#     user_name
#     stripped_user_name
#     radius_request
#     source_ip
#
# operator can be:
#     is
#     is_not
#     match
#     match_not
#     defined
#     date_is_before
#     date_is_after
#
# attribute can be:
#
# - for connection_type
#    Wireless-802.11-EAP
#    Wireless-802.11-NoEAP
#    Ethernet-EAP
#    Ethernet-NoEAP
#    SNMP-Traps
#    Inline
#    Ethernet-NoEAP
#
#
# - for the radius_request
#    All the attributes you can have in the RADIUS request (run FreeRADIUS in debug mode to see these attributes)
#
#
# The value of a time is specific and follow this logic:
# http://search.cpan.org/~pryan/Period-1.20/Period.pm
# For example, if you want to test the current date for Monday to Friday, 9am to 11am and for 2pm to 4pm:
# [timeofday]
# filter = time
# operator = is
# value = wd {Mon Tue Wed Thu Fri} hr {9am-11am}, wd {Mon Tue Wed Thu Fri} hr {2pm-4am}
