
# VLAN FILTERS configuration
# ==========================
#
# Scopes
# ------
# It is possible to trigger rules / actions within the following specific connection flow scopes
# - RegistrationRole: Used when an endpoint is in an *UNREGISTERED* state
# - RegisteredRole: Used when an endpoint is in a *REGISTERED* state
# - ViolationRole: Used when a violation is open on an endpoint
# - InlineRole: Used when the endpoint is detected connecting from an inline VLAN
# - AutoRegister: Used to determine whether or not an endpoint should be autoregistered
# - NodeInfoForAutoReg: Used to specify endpoint parameters when autoregistering
# - IsPhone: (only available on RADIUS based switches)
#
#
# A "VLAN filter" configuration is mainly constituted of two (2) parts; rules(s)/condition(s) and action(s)
# Some working examples covering useful use cases can be found at the bottom of this file
#
#
# Rule(s)/Condition(s)
# --------------------
# Structure example of a rule/condition
# [NAMEOFRULE]
# filter = FILTER
# operator = OPERATOR
# value = VALUE
#
# Filter can be:
#     node_info.autoreg
#     node_info.status
#     node_info.bypass_vlan
#     node_info.bandwidth_balance
#     node_info.regdate
#     node_info.bypass_role
#     node_info.device_class
#     node_info.device_type
#     node_info.device_version
#     node_info.device_score
#     node_info.pid
#     node_info.machine_account
#     node_info.category
#     node_info.mac
#     node_info.last_arp
#     node_info.lastskip
#     node_info.last_dhcp
#     node_info.user_agent
#     node_info.computername
#     node_info.dhcp_fingerprint
#     node_info.detect_date
#     node_info.voip
#     node_info.notes
#     node_info.time_balance
#     node_info.sessionid
#     node_info.dhcp_vendor
#     node_info.unregdate
#     fingerbank_info.device_name
#     fingerbank_info.device_fq
#     fingerbank_info.device_hierarchy_names
#     fingerbank_info.device_hierarchy_ids
#     fingerbank_info.score
#     fingerbank_info.version
#     fingerbank_info.mobile
#     switch._switchIp
#     switch._ip
#     switch._portalURL
#     switch._switchMac
#     switch._ip
#     ifIndex
#     mac
#     connection_type
#     user_name
#     ssid
#     time
#     owner.pid
#     owner.firstname
#     owner.lastname
#     owner.email
#     owner.telephone
#     owner.company
#     owner.address
#     owner.notes
#     owner.sponsor
#     owner.anniversary
#     owner.birthday
#     owner.gender
#     owner.lang
#     owner.nickname
#     owner.cell_phone
#     owner.work_phone
#     owner.title
#     owner.building_number
#     owner.apartment_number
#     owner.room_number
#     owner.custom_field_1
#     owner.custom_field_2
#     owner.custom_field_3
#     owner.custom_field_4
#     owner.custom_field_5
#     owner.custom_field_6
#     owner.custom_field_7
#     owner.custom_field_8
#     owner.custom_field_9
#     owner.portal
#     owner.source
#     owner.nodes
#     owner.password
#     owner.valid_from
#     owner.expiration
#     owner.access_duration
#     owner.access_level
#     owner.can_sponsor
#     owner.unregdate
#     owner.category
#     radius_request.RADIUS_request_attributes (see below)
#
# For the radius_request filter, you can use all the attributes you can have
# in the RADIUS request (run FreeRADIUS in debug mode or take a look at a RADIUS Audit
# log entry to see these attributes)
# 
# Operator can be:
#     is
#     is_not
#     match
#     match_not
#     defined
#     not_defined
#     regex
#     date_is_before
#     date_is_after
#     time
#
# Value can be:
# - for connection_type
#     Wireless-802.11-EAP
#     Wireless-802.11-NoEAP
#     Ethernet-EAP
#     Ethernet-NoEAP
#     SNMP-Traps
#     Inline
#     Ethernet-NoEAP
# - for the radius_request
#     All the attributes you can have in the RADIUS request (run FreeRADIUS in debug mode to see these attributes)
#
# Note: Time / Date based rule(s)/condition(s) values follows the following logic:
# http://search.cpan.org/~pryan/Period-1.20/Period.pm
# For example, if you want to allow access from Monday to Friday, 9am to 11am and from 2pm to 4pm:
# wd {Mon Tue Wed Thu Fri} hr {9am-11am}, wd {Mon Tue Wed Thu Fri} hr {2pm-4am}
#
#
# Actions
# -------
# Structure example of an action
# [NAMEOFTHEACTION:RULE1&RULE2&RULE3]
# scope = SCOPE
# role = ROLE
# action = ACTION
# action_param = ACTION PARAMETERS
#
# Make sure to note the followings when defining an action:
# - Actions are triggered on a first hit match, based on the order in the 'vlan_filters.conf' file
# - Action names must be unique
# - Action definitions (what's inside []) contains the unique name, ':' delimiter, and some valid rule(s)/condition(s) names appended using boolean operators
#
# Scope can be:
# - see beginning of this file for possible scope. They are usually extensions points of endpoint connection flow
#
# Role can be:
# - any existing configured PacketFence user role (Configuration tab, "Roles" menu item under the "Users" menu section)
#
# Action can be:
#    deregister_node (require param => mac)
#    register_node (require param => mac pid)
#    modify_node (require param => mac)
#    trigger_violation (require param => mac tid type)
#
# Action parameter can be:
# - The require param and optional attributes like (for action = modify_node):
#    action_param = mac = $mac, notes = $radius_request->{'Called-Station-Id'}
#
#
# -------------------------
#
#
# EXAMPLES
# --------
#
# - When PacketFence tries to get the normal VLAN for the node and if the category of the node is
# the default one, we return the role "nointernet" (which you will have configured in the switch configuration).
# [category]
# filter = node_info.category
# operator = is
# value = default
#
# [1:category]
# scope = RegisteredRole
# role = nointernet
#
#
# - When PacketFence tries to get the normal VLAN for the node and if the category of the node is 
# the default one and the ssid is OpenWrt-SECURE and the time is between 11am and 2pm from Monday to Friday,
# we return the role "nointernet" (which you will have configured in the switch configuration).
# [2]
# filter = node_info.category
# operator = match
# value = default
#
# [3]
# filter = ssid
# operator = is
# value = OpenWrt-SECURE
#
# [4]
# filter = time
# operator = is
# value = wd {Mon Tue Wed Thu Fri} hr {11am-2pm}
#
# [2:2&3&4]
# scope = RegisteredRole
# role = nointernet
#
#
# -  This will autoregister any device beginning by a set of known Avaya MAC address OUI and consider it as phone
# [avaya_phones]
# filter = node_info.mac
# operator = regex
# value = ^(00:04:0d|84:83:71|00:07:3b|00:09:6e|00:0d:18|00:0d:28|00:1b:4f|24:d9:21|2c:f4:c5|34:75:c7|3c:b1:5b|70:38:ee|b4:b0:17).*
#
# [autoreg:avaya_phones]
# scope = IsPhone
# role = default
#
#
# - This will autoregister devices if the connection is Ethernet-EAP
# [etherneteap]
# filter = connection_type
# operator = is
# value = Ethernet-EAP
#
# [reg:etherneteap]
# scope = AutoRegister
# role = default
#
#
# - This will autoregister machine auth on ethernet EAP or EAP-TLS connection and refuse 
# user auth if there wasn't machine auth before (you must add a role machine and a role 
# REJECT (value: -1) in packetfence's role and switch configuration.
#[EthernetEAP]
#filter = connection_type
#operator = is
#value = Ethernet-EAP
#
#[machineauth]
#filter = user_name
#operator = match
#value = host/
#
#[machine]
#filter = node_info.machine_account
#operator = defined
#
#[EAPTLS]
#filter = radius_request.EAP-Type
#operator = is
#value = EAP-TLS
#
#
#### Machine Auth Autoregister ####
#
#[1:EthernetEAP&machineauth]
#scope = AutoRegister
#role = machine
#
#[2:EthernetEAP&machineauth]
#scope = NodeInfoForAutoReg
#role = machine
#
#
#### Refuse User Auth without machine Auth ####
#
#[3:EthernetEAP&!machine&!EAPTLS]
#scope = RegisteredRole
#role = REJECT
#
#[4:EthernetEAP&!machine]
#scope = RegistrationRole
#role = REJECT
#
#
#### EAP TLS Autoregister ####
#
#[5:EthernetEAP&EAPTLS]
#scope = AutoRegister
#role = machine
#
#[6:EthernetEAP&EAPTLS]
#scope = NodeInfoForAutoReg
#role = machine
#
#
#### Unregister an auto-registered 802.1x device falling back to MAB ####
#
# The conditions below are already defined in vlan_filters.conf.defaults
# To activate this filter you only need to add this section
#[pf_deauth_from_wired_secure:pf_wired_mac_auth&pf_node_wired_eap&pf_node_reg&pf_node_auto_reg]
#scope = RegisteredRole
#action = modify_node
#action_param = mac = $mac, status = unreg, autoreg = no
#role = registration
#
# Web API call:
#
# [3:3]
# scope = RegisteredRole
# action = trigger_violation
# action_param = mac = $mac, tid = 1100010, type = INTERNAL
#
# It means that if the SSID is OpenWrt-SECURE then we send a API call to the function trigger_violation and
# trigger the violation 1100010
# action_param is computed by PacketFence so you can set static and dynamic values
#
#
#### Fingerbank example ####
##
## There are two ways to detect if the device is an Android phone, either by looking if the device is linked to the "Android OS" device by using its ID (33453) or by its name (Android OS)
## Although using device names is more intuitive, they are subject to (very rare) changes, so using the ID is recommended
## To find a device ID by the name, the following command can be used : '/usr/local/pf/bin/pfcmd fingerbank find_device_id "Android OS"'
## See the Fingerbank section in the PacketFence Administration interface for a list of all devices or https://api.fingerbank.org/devices
##
## This would then give us the following condition (note the use of fingerbank::device_is_a) : 
#[android_by_id]
#filter = fingerbank_info.device_name
#operator = fingerbank::device_is_a
#value = 33483
#
## Same example using the name:
#[android_by_name]
#filter = fingerbank_info.device_name
#operator = fingerbank::device_is_a
#value = Android OS
#
## Next, lets add filtering on the Android operating system version using:
## (CAUTION: the version is not always available, when not present, this condition will return false)
#[version_4_plus]
#filter = fingerbank_info.version
#operator = greater_equals
#value = 4
#
## We could also want to validate that the device score is high enough through the following condition:
#[minimum_score]
#filter = fingerbank_info.score
#operator = greater_equals
#value = 30
## The above will ensure that the score is higher than 30 (included) which is the level at which Fingerbank uses informations that aren't easily spoofable for its decision.
##
## We could now create a filter that auto registers Android phones versions 4 and above that have a score of at least 30
##
#[autoreg_android:android_by_name&version_4_plus&minimum_score]
#scope = AutoRegister
#role = default
#
#[info_for_autoreg_android:android_by_name&version_4_plus&minimum_score]
#scope = NodeInfoForAutoReg
#role = default

